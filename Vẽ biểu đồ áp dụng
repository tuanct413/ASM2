import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

# Load the CSV file
file_path = 'SaleTable.csv'
sales_data = pd.read_csv(file_path)

# Convert SaleDate to datetime format and set as index
sales_data['SaleDate'] = pd.to_datetime(sales_data['SaleDate'], format='%d/%m/%Y')
sales_data.set_index('SaleDate', inplace=True)

# Aggregate total sales by date
total_sales_by_date = sales_data.resample('D').sum()  # Resample to daily sales, summing up TotalPrice

# Add a numerical feature for date
total_sales_by_date['DateOrdinal'] = total_sales_by_date.index.to_julian_date()

# Split data into training and test sets
X = total_sales_by_date[['DateOrdinal']]
y = total_sales_by_date['TotalPrice']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and fit the model
model = LinearRegression()
model.fit(X_train, y_train)

# Predict on test set
y_pred = model.predict(X_test)

# Evaluate model performance (optional)
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

# Create a date range for predictions
future_dates = pd.date_range(start=total_sales_by_date.index[-1], periods=30, freq='D')

# Convert future_dates to NumPy array and reshape
future_dates_ordinal = future_dates.to_julian_date().values.reshape(-1, 1)

# Predict for future dates
future_sales_pred = model.predict(future_dates_ordinal)

# Plot actual sales and predictions
plt.figure(figsize=(12, 6))
plt.plot(total_sales_by_date.index, total_sales_by_date['TotalPrice'], label='Actual Sales')
plt.plot(future_dates, future_sales_pred, label='Predicted Sales', linestyle='--')
plt.xlabel('Date')
plt.ylabel('Total Sales')
plt.title('Predicted vs Actual Total Sales Over Time')
plt.legend()
plt.grid(True)
plt.show()
